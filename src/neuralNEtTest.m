% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.
 

load house_dataset

inputs = houseInputs;
targets = houseTargets;
 
% Create a Fitting Network
hiddenLayerSize = 10;
net = linearlayer([0 1],0.02);

% Set up Division of Data for Training, Validation, Testing
% net.divideParam.trainRatio = 70/100;
% net.divideParam.valRatio = 15/100;
% net.divideParam.testRatio = 15/100;
 
% Train the Network
% [net,tr] = train(net,inputs,targets);
net = fitnet(2); 

%Create cell array of my data that comes in vector format 
for i=1:length(targets) 
    inputs2{i}=inputs(:,i); 
    targets2{i}=targets(:,i); 
end 

%initialise weights: 
net=init(net); 

%Do incremental learning in batches of 2 
for i=1:100 
    [net,tr] = adapt(net,inputs2(:,((i-1)*2+1):i*2),targets2(((i-1)*2+1):i*2)); 
end 